openapi: 3.0.2
info:
  title: NewCMMS public REST API
  version: 1.0.0
  contact:
    name: Bogdan Shevchenko
    url: https://github.com/shevchenkobn
    email: bohdan.shevchenko1@nure.ua
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: /api/v1
    description: The server will be served from the same host as this document.
tags:
  - name: auth
    description: API to manage auth tokens
  - name: trigger-devices
    description: API to manage trigger devices
  - name: users
    description: API to manage users
paths:
  /users:
    parameters: []
    post:
      description: Create user
      tags:
        - users
      security:
        - jwt-bearer:
            - admin
      requestBody:
        description: A user to create. The password can be generated, omit this field then
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
        required: true
      parameters:
        - $ref: "#/components/parameters/SelectUserChange"
      responses:
        "201":
          description: Optional user object if select was provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithPassword"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
    get:
      description: Get users
      tags:
        - users
      security:
        - jwt-bearer:
            - admin
      parameters:
        - $ref: "#/components/parameters/SelectUser"
        - in: query
          name: user-ids
          description: User IDs to include in result
          schema:
            type: array
            items:
              type: integer
              format: int32
              minimum: 1
            minItems: 1
            uniqueItems: true
        - $ref: "#/components/parameters/Skip"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Cursor"
        - $ref: "#/components/parameters/CursorNotGenerate"
        - in: query
          name: sort
          description: Sort orders
          schema:
            type: array
            items:
              type: string
              enum:
                - <userId
                - ">userId"
                - <email
                - ">email"
                - <role
                - ">role"
                - <fullName
                - ">fullName"
            minItems: 1
            maxItems: 4
      responses:
        "200":
          description: Get list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    $ref: "#/components/schemas/Cursor"
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserOptional"
                additionalProperties: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
  /trigger-devices:
    parameters: []
    post:
      description: Create trigger device
      tags:
        - trigger-devices
      security:
        - jwt-bearer:
            - admin
      requestBody:
        description: A trigger device to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TriggerDeviceCreate"
        required: true
      parameters:
        - $ref: "#/components/parameters/SelectTriggerDevice"
      responses:
        "201":
          description: The trigger device was created. Optional object of it
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TriggerDeviceOptional"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
    get:
      description: Get trigger
      tags:
        - trigger-devices
      security:
        - jwt-bearer:
            - admin
      parameters:
        - $ref: "#/components/parameters/SelectTriggerDevice"
        - in: query
          name: trigger-device-ids
          description: Trigger device IDs to include in result
          schema:
            type: array
            items:
              type: integer
              format: int32
              minimum: 1
            minItems: 1
            uniqueItems: true
        - $ref: "#/components/parameters/Skip"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Cursor"
        - $ref: "#/components/parameters/CursorNotGenerate"
        - in: query
          name: sort
          description: Sort orders
          schema:
            type: array
            items:
              type: string
              enum:
                - <triggerDeviceId
                - ">triggerDeviceId"
                - <physicalAddress
                - ">physicalAddress"
                - <status
                - ">status"
                - <name
                - ">name"
                - <type
                - ">type"
            minItems: 1
            maxItems: 5
      responses:
        "200":
          description: Get list of trigger devices
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    $ref: "#/components/schemas/Cursor"
                  triggerDevices:
                    type: array
                    items:
                      $ref: "#/components/schemas/TriggerDeviceOptional"
                additionalProperties: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
  /auth/refresh:
    parameters: []
    post:
      description: Acquire a token pair
      tags:
        - auth
      parameters:
        - in: query
          name: include-refresh-token
          description: Whether include refresh token in response or not
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        description: Credentials to log in with
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenPair"
        required: true
      responses:
        "200":
          description: Login Successful
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                additionalProperties: false
        "400":
          $ref: "#/components/responses/OpenApiBadRequest"
        "401":
          description: Error in tokens provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/identity:
    parameters: []
    get:
      description: Get identity of authenticated user
      tags:
        - auth
        - users
      security:
        - jwt-bearer: []
      responses:
        "200":
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    patch:
      description: Update user
      tags:
        - auth
        - users
      security:
        - jwt-bearer: []
      parameters:
        - $ref: "#/components/parameters/SelectUserChange"
      requestBody:
        description: A user update. The password can be generated, put "" then
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
        required: true
      responses:
        "200":
          description: Return user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithPassword"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    delete:
      description: Delete current user account
      tags:
        - auth
        - users
      security:
        - jwt-bearer: []
      parameters:
        - $ref: "#/components/parameters/SelectUser"
      responses:
        "200":
          description: Return user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOptional"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
  /auth:
    parameters: []
    post:
      description: Acquire a token pair
      tags:
        - auth
      requestBody:
        description: Credentials to log in with
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  $ref: "#/components/schemas/UserPassword"
              additionalProperties: false
        required: true
      responses:
        "200":
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPair"
        "400":
          $ref: "#/components/responses/OpenApiBadRequest"
        "401":
          description: Error in login data provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/users/{userId}":
    parameters:
      - in: path
        name: userId
        schema:
          type: integer
          format: int32
          minimum: 1
        required: true
    get:
      description: Get user
      tags:
        - users
      security:
        - jwt-bearer:
            - admin
      parameters:
        - $ref: "#/components/parameters/SelectUser"
      responses:
        "200":
          description: Return user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOptional"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      description: Delete user
      tags:
        - users
      security:
        - jwt-bearer:
            - admin
      parameters:
        - $ref: "#/components/parameters/SelectUser"
      responses:
        "200":
          description: Return user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOptional"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      description: Update user
      tags:
        - users
      security:
        - jwt-bearer:
            - admin
      parameters:
        - $ref: "#/components/parameters/SelectUserChange"
      requestBody:
        description: A user update. The password can be generated, put "" then
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
        required: true
      responses:
        "200":
          description: Return user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithPassword"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
  "/trigger-devices/{triggerDeviceId}":
    parameters:
      - in: path
        name: triggerDeviceId
        schema:
          type: integer
          format: int32
          minimum: 1
        required: true
    get:
      description: Get trigger device
      tags:
        - trigger-devices
      security:
        - jwt-bearer:
            - admin
      parameters:
        - $ref: "#/components/parameters/SelectTriggerDevice"
      responses:
        "200":
          description: Return trigger device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TriggerDeviceOptional"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      description: Delete trigger device
      tags:
        - trigger-devices
      security:
        - jwt-bearer:
            - admin
      parameters:
        - $ref: "#/components/parameters/SelectTriggerDevice"
      responses:
        "200":
          description: Return trigger device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TriggerDeviceOptional"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      description: Update trigger device
      tags:
        - trigger-devices
      security:
        - jwt-bearer:
            - admin
      parameters:
        - $ref: "#/components/parameters/SelectTriggerDevice"
      requestBody:
        description: A trigger device update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TriggerDeviceUpdate"
        required: true
      responses:
        "200":
          description: Return trigger device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TriggerDeviceOptional"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
components:
  securitySchemes:
    jwt-bearer:
      type: oauth2
      description: 'The main and only mean of authorizing to the system for human actors.
        The JWT token has `userId` as subject and payload of `{ "id": 42,
        "scopes": ["string", "scopes" }` where `id` is `userId` and `scopes` is
        an array of authorised scopes to be described below. The token MUST be
        provided under `Bearer ` scheme in `Authorization` header.'
      flows:
        password:
          scopes:
            employee: For Access Token. Mainly readonly access by non-admin users
              (employees).
            admin: For Access Token. CRUD access to all the entities.
            token:refresh: For Refresh Token. Scope to refresh token.
          tokenUrl: "{serverUrlWithApiBase}/auth/login"
          refreshUrl: "{serverUrlWithApiBase}/auth/refresh"
  schemas:
    Id:
      type: integer
      minimum: 1
    IdList:
      type: array
      items:
        type: integer
        minimum: 1
      minItems: 1
      uniqueItems: true
    Cursor:
      type: string
      description: The cursor used to paginate efficiently.
      format: byte
      nullable: true
    Error:
      type: object
      required:
        - code
      properties:
        code:
          type: string
      additionalProperties: true
    TokenPair:
      type: object
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      additionalProperties: false
    UserPassword:
      type: string
      format: password
      pattern: ^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z]).{6,}$
    UserPasswordNullable:
      type: string
      format: password
      pattern: ^((?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z]).{6,}|)$
    UserOptional:
      type: object
      properties:
        email:
          type: string
          format: email
        role:
          description: Enum actually
          type: integer
          format: int32
          minimum: 1
          maximum: 3
        fullName:
          type: string
        userId:
          type: integer
          format: int32
          minimum: 1
      additionalProperties: false
    UserWithPassword:
      type: object
      properties:
        email:
          type: string
          format: email
        role:
          description: Enum actually
          type: integer
          format: int32
          minimum: 1
          maximum: 3
        fullName:
          type: string
        userId:
          type: integer
          format: int32
          minimum: 1
        password:
          type: string
          format: password
          pattern: ^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z]).{6,}$
      additionalProperties: false
    UserCreate:
      type: object
      required:
        - email
        - role
        - fullName
      properties:
        email:
          type: string
          format: email
        role:
          description: Enum actually
          type: integer
          format: int32
          minimum: 1
          maximum: 3
        fullName:
          type: string
        password:
          type: string
          format: password
          pattern: ^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z]).{6,}$
      additionalProperties: false
    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
        role:
          description: Enum actually
          type: integer
          format: int32
          minimum: 1
          maximum: 3
        fullName:
          type: string
        password:
          type: string
          format: password
          pattern: ^((?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z]).{6,}|)$
      minProperties: 1
      additionalProperties: false
    User:
      type: object
      required:
        - userId
        - email
        - role
        - fullName
      properties:
        email:
          type: string
          format: email
        role:
          description: Enum actually
          type: integer
          format: int32
          minimum: 1
          maximum: 3
        fullName:
          type: string
        userId:
          type: integer
          format: int32
          minimum: 1
      additionalProperties: false
    TriggerDeviceCreate:
      type: object
      required:
        - physicalAddress
        - status
        - name
        - type
      properties:
        physicalAddress:
          type: string
          format: physical-address
        status:
          type: integer
          format: int32
          minimum: 1
          maximum: 2
        name:
          type: string
        type:
          type: string
      minProperties: 1
      additionalProperties: false
    TriggerDeviceUpdate:
      type: object
      properties:
        physicalAddress:
          type: string
          format: physical-address
        status:
          type: integer
          format: int32
          minimum: 1
          maximum: 2
        name:
          type: string
        type:
          type: string
      minProperties: 1
      additionalProperties: false
    TriggerDeviceOptional:
      type: object
      properties:
        triggerDeviceId:
          type: integer
          minimum: 1
        physicalAddress:
          type: string
          pattern: ^[\da-f]{2}(:[\da-f]{2}){5}$
        status:
          type: integer
          format: int32
          minimum: 1
          maximum: 2
        name:
          type: string
        type:
          type: string
      additionalProperties: false
    TriggerDevice:
      type: object
      required:
        - triggerDeviceId
        - physicalAddress
        - status
        - name
        - type
      properties:
        triggerDeviceId:
          type: integer
          minimum: 1
        physicalAddress:
          type: string
          pattern: ^[\da-f]{2}(:[\da-f]{2}){5}$
        status:
          type: integer
          format: int32
          minimum: 1
          maximum: 2
        name:
          type: string
        type:
          type: string
      additionalProperties: false
  responses:
    OpenApiBadRequest:
      description: A response that indicates about error in request produced by the OpenApi
        validation. It is not programmatical but API misuse.
      content:
        application/json:
          schema:
            type: object
            required:
              - code
            properties:
              code:
                type: string
                enum:
                  - OPENAPI_VALIDATION
            additionalProperties: true
    BadRequest:
      description: A response that indicates about error in request produced either by the
        OpenApi validation or in business logic.
      content:
        application/json:
          schema:
            type: object
            required:
              - code
            properties:
              code:
                type: string
            additionalProperties: true
    Unauthenticated:
      description: Access token is absent, malformed or expired
      content:
        application/json:
          schema:
            type: object
            required:
              - code
            properties:
              code:
                type: string
            additionalProperties: true
    Forbidden:
      description: The scopes provided with token or user's role doesn't allow the
        operation.
      content:
        application/json:
          schema:
            type: object
            required:
              - code
            properties:
              code:
                type: string
            additionalProperties: true
    NotFound:
      description: The entity does not exist
      content:
        application/json:
          schema:
            type: object
            required:
              - code
            properties:
              code:
                type: string
            additionalProperties: true
  parameters:
    Skip:
      in: query
      name: skip
      description: Number of enitites in the list that satisfy filters but must be skipped
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 10000
    Limit:
      in: query
      name: limit
      description: Maximum number of enitites in the list that satisfy filters you want to
        retrieve
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 1000
    Cursor:
      in: query
      name: cursor
      description: The cursor that was generated from the previous request to the API for
        pagination.
      required: false
      schema:
        type: string
        description: The cursor used to paginate efficiently.
        format: byte
        nullable: true
    CursorNotGenerate:
      in: query
      name: cursor-not-generate
      description: Flag that says whether cursor must be generated
      required: false
      schema:
        type: boolean
        default: false
    SelectUserChange:
      in: query
      name: select
      description: Fields in json you want to consume
      schema:
        type: array
        items:
          type: string
          enum:
            - userId
            - email
            - role
            - fullName
            - password
        uniqueItems: true
        minItems: 1
    SelectUser:
      in: query
      name: select
      description: Fields in json you want to consume
      schema:
        type: array
        items:
          type: string
          enum:
            - userId
            - email
            - role
            - fullName
        uniqueItems: true
        minItems: 1
    SelectTriggerDevice:
      in: query
      name: select
      description: Fields in json you want to consume
      schema:
        type: array
        items:
          type: string
          enum:
            - triggerDeviceId
            - physicalAddress
            - status
            - name
            - type
        uniqueItems: true
        minItems: 1
x-express-openapi-disable-defaults-middleware: true
x-express-openapi-disable-response-validation-middleware: false
x-express-openapi-response-validation-strict: true
x-express-openapi-additional-middleware:
  - null
